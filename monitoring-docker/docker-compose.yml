version: '1.0'
networks:
  monitor-net:
    driver: bridge

volumes:
  prometheus_data: { }
  grafana_data: { }

services:
  prometheus:
    build:
      context: prometheus/
      args:
        PROMETHEUS_VERSION: ${PROMETHEUS_VERSION}
    container_name: prometheus
    volumes:
      - ./prometheus/config:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  alertmanager:
    build:
      context: alertmanager/
      args:
        ALERT_MANAGER_VERSION: ${ALERT_MANAGER_VERSION}
    container_name: alert_manager
    volumes:
      - ./alertmanager/config:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager/config'
    restart: unless-stopped
    expose:
      - 9093
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  nodeexporter:
    build:
      context: nodeexporter/
      args:
        NODE_EXPORTER_VERSION: ${NODE_EXPORTER_VERSION}
    container_name: node_exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  cadvisor:
    build:
      context: cadvisor/
      args:
        CADVISOR_VERSION: ${CADVISOR_VERSION}
    container_name: cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock
      #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  grafana:
    build:
      context: grafana/
      args:
        GRAFANA_VERSION: ${GRAFANA_VERSION}
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/config/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/config/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    expose:
      - 3000
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  pushgateway:
    build:
      context: pushgateway/
      args:
        PUSH_GATEWAY_VERSION: ${PUSH_GATEWAY_VERSION}
    container_name: push_gateway
    restart: unless-stopped
    expose:
      - 9091
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  caddy:
    build:
      context: caddy/
      args:
        CADDY_VERSION: ${CADDY_VERSION}
    container_name: caddy
    ports:
      - "3000:3000"
      - "3092:8080"
      - "9090:9090"
      - "3093:9093"
      - "3091:9091"
    volumes:
      - ./caddy/config:/etc/caddy
    environment:
      - ADMIN_USER=${ADMIN_USER:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - ADMIN_PASSWORD_HASH=${ADMIN_PASSWORD_HASH:-$2a$14$1l.IozJx7xQRVmlkEQ32OeEEfP5mRxTpbDTCTcXRqn19gXD8YK1pO}
    restart: unless-stopped
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
